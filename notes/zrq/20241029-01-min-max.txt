#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2024, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Original section on min and max values.
        Removed from the document, but needs to be replaced with a new section.
        Saved the old text here for reference.

    Result:

        Work in progress ...

# -----------------------------------------------------

subsection{Minimum and maximum}
\label{minandmax}

The \datamodel{} for describing compute resources includes elements for specifying the numeric size
and number of resources such as \cpu{} cores, memory and storage.

If the \jupyternotebook{} in our example needs a minimum of 8 \cpu{} cores and 16G of memory
to be able to perform its calculations, then this can be specified in the compute resource.

\begin{lstlisting}[]
# ExecutionBroker client request.
request:
  # Details of the executable.
  executable:
    ....
  # Details of the resources needed.
  resources:
    compute:
    - name: "compute-001"
      type: "https://www.purl.org/ivoa.net/resource-types/generic-compute"
      spec:
        cores:
          min: 8
        memory:
          min: 16
\end{lstlisting}

All of the \datamodel{} elements for specifying the size or number of resources are defined
as pairs of minimum and maximum values.
This allows a conversation between the \execbrokerclass{} client and services
to discover the best platform to execute the task.

The client requests the minimun resources it needs,
and each service responds with a set of \execoffer{s} which specify the maximum
level of resources they are able to provide.

For example, if a platform is able to provide double the compute resources,
16 \cpu{} cores and 32G of memory,
then it can indicate this by specifying higher maximum values in its response.

\begin{lstlisting}[]
# ExecutionBroker service response.
response:
  # Details of the executable.
  executable:
    ....
  # Details of the resources offered.
  resources:
    compute:
    - name: "compute-001"
      type: "https://www.purl.org/ivoa.net/resource-types/generic-compute"
      spec:
        cores:
          min:  8
          max: 16
        memory:
          min: 16
          max: 32
\end{lstlisting}

This response represents an \execoffer{} to start with a minimum of 8 \cpu{} cores and 16G of memory
as requested, with the option to use a maximum of 16 \cpu{} cores and 32G of memory if needed.

The client may receive different \execoffer{s} from different platforms and can pass this information
on the user to allow them to choose the \execoffer{} that best fits their use case.
The notebook they have chose may specify a minimum of 8 \cpu{} cores and 16G of memory,
but an \execoffer{} of twice the resources allows the user more scope for experimenting with
more data or more complex algorithms.

This \scalable{} compute resource represents something like a \kubernetes{} platform where the
execution can start with a minimum configuration and scale on demand up to a maximum limit.

This is slightly different to a platform like \openstack{} which allocates resources
in specific blocks, defined by the set of \textit{'flavors'} available on that particular platform.
If the smallest flavor of virtual machine available on the platform has 16 \cpu{} cores and 24G of memory,
then the service can represent that by setting the minimum values in its \execoffer{} to match available resources.

\begin{lstlisting}[]
# ExecutionBroker service response.
response:
  # Details of the executable.
  executable:
    ....
  # Details of the resources offered.
  resources:
    compute:
    - name: "compute-001"
      type: "https://www.purl.org/ivoa.net/resource-types/generic-compute"
      spec:
        cores:
          min: 16
          max: 16
        memory:
          min: 24
          max: 24
\end{lstlisting}

This response represents an \execoffer{} to start with a fixed allocation of 16 \cpu{} cores and 24G of memory.

An \execbrokerclass{} MAY NOT make an \execoffer{} with less than the minimum resources requested.
For example, if an \openstack{} platform only has a virtual machine flavor with 1 \cpu{} core and 2G of memory,
then it MAY NOT offer this resource as it is less than the requested minimum.

Note that the term \textit{'compute resource'} specifically avoids stating whether the
notebook will be run in an \openstack{} virtual machine or a \kubernetes{} cluster.
As far as the user is concerned, it should not matter. As long as the compute resource provides
sufficient \cpu{} cores and memory for the notebook to execute, the technical details of how the
platform implements this should not be relevant at this level of abstraction.

The user just wants their notebook to run. The technical details of what technologies are used
under the hood to make it happen should be someone else's problem.





